shiny::runApp('D:/rascunhos/R/my_shiny_app1')
getwd()
#setwd("C:/aavallim2016/SCRIPTS_R/IC - Samuel")
setwd("F:/SistemasDeInform/IC/Scripts e Prox. Etapas - Vallim")
#setwd("C:/aavallim2016/SCRIPTS_R/IC - Samuel")
setwd("F://SistemasDeInform//IC//Scripts e Prox. Etapas - Vallim")
shiny::runApp('D:/rascunhos/R/my_shiny_app1')
runApp('D:/rascunhos/R/my_shiny_app1')
print('oi')
runApp('D:/rascunhos/R/my_shiny_app1')
runApp('D:/rascunhos/R/my_shiny_app1')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp()
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp()
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
runApp('D:/SOM_IC')
localiz <- as.matrix(som_model$unit.classif)
getwd()
setwd("/resources/data/SOM_IC")
library(kohonen)
require(kohonen)
df <- read.csv('uscitiesCsv.csv', header = TRUE, sep = ",")
# DATA FRAME de Delaware com 2 Vari?veis (latitude e longitude), 77 exemplares
df_del <- df[621:697, c(9,10)]
# Normalizacao dos Dados
data_train_matrix <- as.matrix(scale(df_del))
som_grid <- somgrid(xdim = 4, ydim = 4, topo="hexagonal") # SOM 6x6, hexagonal
som_model <- som(data_train_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
radius = 5)
#plots do modelo SOM
plot(som_model, type="changes")
#quantidade de amostras mapeadas em cada node (centroide)
plot(som_model, type="count", main = "node counts")
plot(som_model, type="dist.neighbours", main = "SOM neighbour distances")
#aaa
plot(som_model, type="codes", main = "codes")
som_model$unit.classif
#heatmaps:
#allows the visualisation of the distribution of a single variable across the map
plot(som_model, type = "property",
property = getCodes(som_model)[,1],
main=colnames(getCodes(som_model))[1])
plot(som_model, type = "property",
property = getCodes(som_model)[,2],
main=colnames(getCodes(som_model))[2])
# Montagem de DF com os Neur?nios do SOM para Washington
mydata <- as.data.frame(som_model$codes)
# cALCULANDO sOMAS DE qUADRADOS (Vari?ncias) para o Mydata - WASHINGTON
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
######### Clusteriza??o dos N?s do SOM, pelo K-means (variando o K) ###########
# Registra a Varia??o Interna (WSS) de cada Cluster e Soma essas varia??es
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
###############################################################################
# Plotagem do Gr?fico de Cotovelo - WSS vs. K
plot(wss, main = "nrow*variances")
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2')
#################  Hierarchical Clustering - hclust()  #########################
#################  Distance Matrix Computation dist()  #########################
##### Monta Clusters da Matriz de Distancias entre os Neuronios ###########
#### cuttree()  -  Cut a Tree into Groups of Data
### Cuts a tree, e.g., as resulting from hclust, into several groups either by specifying the desired number(s) of groups or the cut height(s)
#### cutree(tree, k = NULL, h = NULL)
som_cluster <- cutree(hclust(dist(as.data.frame(som_model$codes))), 6)
plot(som_cluster)
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
getwd()
setwd("/resources/data/SOM_IC")
library(kohonen)
require(kohonen)
df <- read.csv('uscitiesCsv.csv', header = TRUE, sep = ",")
# DATA FRAME de Delaware com 2 Vari?veis (latitude e longitude), 77 exemplares
df_del <- df[621:697, c(9,10)]
# Normalizacao dos Dados
data_train_matrix <- as.matrix(scale(df_del))
som_grid <- somgrid(xdim = 4, ydim = 4, topo="hexagonal") # SOM 6x6, hexagonal
som_model <- som(data_train_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
radius = 5)
#plots do modelo SOM
plot(som_model, type="changes")
#quantidade de amostras mapeadas em cada node (centroide)
plot(som_model, type="count", main = "node counts")
plot(som_model, type="dist.neighbours", main = "SOM neighbour distances")
#aaa
plot(som_model, type="codes", main = "codes")
som_model$unit.classif
#heatmaps:
#allows the visualisation of the distribution of a single variable across the map
plot(som_model, type = "property",
property = getCodes(som_model)[,1],
main=colnames(getCodes(som_model))[1])
plot(som_model, type = "property",
property = getCodes(som_model)[,2],
main=colnames(getCodes(som_model))[2])
# Montagem de DF com os Neur?nios do SOM para Washington
mydata <- as.data.frame(som_model$codes)
# cALCULANDO sOMAS DE qUADRADOS (Vari?ncias) para o Mydata - WASHINGTON
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
######### Clusteriza??o dos N?s do SOM, pelo K-means (variando o K) ###########
# Registra a Varia??o Interna (WSS) de cada Cluster e Soma essas varia??es
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
###############################################################################
# Plotagem do Gr?fico de Cotovelo - WSS vs. K
plot(wss, main = "nrow*variances")
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2')
#################  Hierarchical Clustering - hclust()  #########################
#################  Distance Matrix Computation dist()  #########################
##### Monta Clusters da Matriz de Distancias entre os Neuronios ###########
#### cuttree()  -  Cut a Tree into Groups of Data
### Cuts a tree, e.g., as resulting from hclust, into several groups either by specifying the desired number(s) of groups or the cut height(s)
#### cutree(tree, k = NULL, h = NULL)
som_cluster <- cutree(hclust(dist(as.data.frame(som_model$codes))), 6)
plot(som_cluster)
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
getwd()
setwd("/resources/data/SOM_IC")
getwd()
setwd("/resources/data/SOM_IC")
setwd("D:/SOM_IC")
library(kohonen)
require(kohonen)
df <- read.csv('uscitiesCsv.csv', header = TRUE, sep = ",")
# DATA FRAME de Delaware com 2 Vari?veis (latitude e longitude), 77 exemplares
df_del <- df[621:697, c(9,10)]
# Normalizacao dos Dados
data_train_matrix <- as.matrix(scale(df_del))
som_grid <- somgrid(xdim = 4, ydim = 4, topo="hexagonal") # SOM 6x6, hexagonal
som_model <- som(data_train_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
radius = 5)
#plots do modelo SOM
plot(som_model, type="changes")
#quantidade de amostras mapeadas em cada node (centroide)
plot(som_model, type="count", main = "node counts")
plot(som_model, type="dist.neighbours", main = "SOM neighbour distances")
#aaa
plot(som_model, type="codes", main = "codes")
som_model$unit.classif
#heatmaps:
#allows the visualisation of the distribution of a single variable across the map
plot(som_model, type = "property",
property = getCodes(som_model)[,1],
main=colnames(getCodes(som_model))[1])
plot(som_model, type = "property",
property = getCodes(som_model)[,2],
main=colnames(getCodes(som_model))[2])
# Montagem de DF com os Neur?nios do SOM para Washington
mydata <- as.data.frame(som_model$codes)
# cALCULANDO sOMAS DE qUADRADOS (Vari?ncias) para o Mydata - WASHINGTON
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
######### Clusteriza??o dos N?s do SOM, pelo K-means (variando o K) ###########
# Registra a Varia??o Interna (WSS) de cada Cluster e Soma essas varia??es
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
###############################################################################
# Plotagem do Gr?fico de Cotovelo - WSS vs. K
plot(wss, main = "nrow*variances")
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2')
#################  Hierarchical Clustering - hclust()  #########################
#################  Distance Matrix Computation dist()  #########################
##### Monta Clusters da Matriz de Distancias entre os Neuronios ###########
#### cuttree()  -  Cut a Tree into Groups of Data
### Cuts a tree, e.g., as resulting from hclust, into several groups either by specifying the desired number(s) of groups or the cut height(s)
#### cutree(tree, k = NULL, h = NULL)
som_cluster <- cutree(hclust(dist(as.data.frame(som_model$codes))), 6)
plot(som_cluster)
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
localiz <- as.matrix(som_model$unit.classif)
View(localiz)
